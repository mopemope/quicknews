// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mopemope/quicknews/ent/article"
	"github.com/mopemope/quicknews/ent/feed"
	"github.com/mopemope/quicknews/ent/summary"
)

// Summary is the model entity for the Summary schema.
type Summary struct {
	config `json:"-"`
	// ID of the ent.
	// Unique identifier
	ID uuid.UUID `json:"id,omitempty"`
	// URL
	URL string `json:"url,omitempty"`
	// Summary title
	Title string `json:"title,omitempty"`
	// Summary text
	Summary string `json:"summary,omitempty"`
	// Read status
	Readed bool `json:"readed,omitempty"`
	// Listened status
	Listend bool `json:"listend,omitempty"`
	// Time the feed was added
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SummaryQuery when eager-loading is set.
	Edges           SummaryEdges `json:"edges"`
	article_summary *uuid.UUID
	feed_summaries  *uuid.UUID
	selectValues    sql.SelectValues
}

// SummaryEdges holds the relations/edges for other nodes in the graph.
type SummaryEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// Feed holds the value of the feed edge.
	Feed *Feed `json:"feed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SummaryEdges) ArticleOrErr() (*Article, error) {
	if e.Article != nil {
		return e.Article, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: article.Label}
	}
	return nil, &NotLoadedError{edge: "article"}
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SummaryEdges) FeedOrErr() (*Feed, error) {
	if e.Feed != nil {
		return e.Feed, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: feed.Label}
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Summary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case summary.FieldReaded, summary.FieldListend:
			values[i] = new(sql.NullBool)
		case summary.FieldURL, summary.FieldTitle, summary.FieldSummary:
			values[i] = new(sql.NullString)
		case summary.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case summary.FieldID:
			values[i] = new(uuid.UUID)
		case summary.ForeignKeys[0]: // article_summary
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case summary.ForeignKeys[1]: // feed_summaries
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Summary fields.
func (s *Summary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case summary.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case summary.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case summary.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case summary.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				s.Summary = value.String
			}
		case summary.FieldReaded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field readed", values[i])
			} else if value.Valid {
				s.Readed = value.Bool
			}
		case summary.FieldListend:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field listend", values[i])
			} else if value.Valid {
				s.Listend = value.Bool
			}
		case summary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case summary.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field article_summary", values[i])
			} else if value.Valid {
				s.article_summary = new(uuid.UUID)
				*s.article_summary = *value.S.(*uuid.UUID)
			}
		case summary.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field feed_summaries", values[i])
			} else if value.Valid {
				s.feed_summaries = new(uuid.UUID)
				*s.feed_summaries = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Summary.
// This includes values selected through modifiers, order, etc.
func (s *Summary) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the Summary entity.
func (s *Summary) QueryArticle() *ArticleQuery {
	return NewSummaryClient(s.config).QueryArticle(s)
}

// QueryFeed queries the "feed" edge of the Summary entity.
func (s *Summary) QueryFeed() *FeedQuery {
	return NewSummaryClient(s.config).QueryFeed(s)
}

// Update returns a builder for updating this Summary.
// Note that you need to call Summary.Unwrap() before calling this method if this Summary
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Summary) Update() *SummaryUpdateOne {
	return NewSummaryClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Summary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Summary) Unwrap() *Summary {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Summary is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Summary) String() string {
	var builder strings.Builder
	builder.WriteString("Summary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("url=")
	builder.WriteString(s.URL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(s.Title)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(s.Summary)
	builder.WriteString(", ")
	builder.WriteString("readed=")
	builder.WriteString(fmt.Sprintf("%v", s.Readed))
	builder.WriteString(", ")
	builder.WriteString("listend=")
	builder.WriteString(fmt.Sprintf("%v", s.Listend))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Summaries is a parsable slice of Summary.
type Summaries []*Summary
