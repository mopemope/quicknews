// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mopemope/quicknews/ent/article"
	"github.com/mopemope/quicknews/ent/feed"
	"github.com/mopemope/quicknews/ent/predicate"
	"github.com/mopemope/quicknews/ent/summary"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle = "Article"
	TypeFeed    = "Feed"
	TypeSummary = "Summary"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	title          *string
	url            *string
	description    *string
	content        *string
	published_at   *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	feed           *uuid.UUID
	clearedfeed    bool
	summary        *uuid.UUID
	clearedsummary bool
	done           bool
	oldValue       func(context.Context) (*Article, error)
	predicates     []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id uuid.UUID) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ArticleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArticleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArticleMutation) ResetTitle() {
	m.title = nil
}

// SetURL sets the "url" field.
func (m *ArticleMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ArticleMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ArticleMutation) ResetURL() {
	m.url = nil
}

// SetDescription sets the "description" field.
func (m *ArticleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ArticleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[article.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ArticleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[article.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, article.FieldDescription)
}

// SetContent sets the "content" field.
func (m *ArticleMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *ArticleMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *ArticleMutation) ClearContent() {
	m.content = nil
	m.clearedFields[article.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *ArticleMutation) ContentCleared() bool {
	_, ok := m.clearedFields[article.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *ArticleMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, article.FieldContent)
}

// SetPublishedAt sets the "published_at" field.
func (m *ArticleMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *ArticleMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ClearPublishedAt clears the value of the "published_at" field.
func (m *ArticleMutation) ClearPublishedAt() {
	m.published_at = nil
	m.clearedFields[article.FieldPublishedAt] = struct{}{}
}

// PublishedAtCleared returns if the "published_at" field was cleared in this mutation.
func (m *ArticleMutation) PublishedAtCleared() bool {
	_, ok := m.clearedFields[article.FieldPublishedAt]
	return ok
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *ArticleMutation) ResetPublishedAt() {
	m.published_at = nil
	delete(m.clearedFields, article.FieldPublishedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *ArticleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ArticleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ArticleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetFeedID sets the "feed" edge to the Feed entity by id.
func (m *ArticleMutation) SetFeedID(id uuid.UUID) {
	m.feed = &id
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (m *ArticleMutation) ClearFeed() {
	m.clearedfeed = true
}

// FeedCleared reports if the "feed" edge to the Feed entity was cleared.
func (m *ArticleMutation) FeedCleared() bool {
	return m.clearedfeed
}

// FeedID returns the "feed" edge ID in the mutation.
func (m *ArticleMutation) FeedID() (id uuid.UUID, exists bool) {
	if m.feed != nil {
		return *m.feed, true
	}
	return
}

// FeedIDs returns the "feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FeedID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) FeedIDs() (ids []uuid.UUID) {
	if id := m.feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFeed resets all changes to the "feed" edge.
func (m *ArticleMutation) ResetFeed() {
	m.feed = nil
	m.clearedfeed = false
}

// SetSummaryID sets the "summary" edge to the Summary entity by id.
func (m *ArticleMutation) SetSummaryID(id uuid.UUID) {
	m.summary = &id
}

// ClearSummary clears the "summary" edge to the Summary entity.
func (m *ArticleMutation) ClearSummary() {
	m.clearedsummary = true
}

// SummaryCleared reports if the "summary" edge to the Summary entity was cleared.
func (m *ArticleMutation) SummaryCleared() bool {
	return m.clearedsummary
}

// SummaryID returns the "summary" edge ID in the mutation.
func (m *ArticleMutation) SummaryID() (id uuid.UUID, exists bool) {
	if m.summary != nil {
		return *m.summary, true
	}
	return
}

// SummaryIDs returns the "summary" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SummaryID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) SummaryIDs() (ids []uuid.UUID) {
	if id := m.summary; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSummary resets all changes to the "summary" edge.
func (m *ArticleMutation) ResetSummary() {
	m.summary = nil
	m.clearedsummary = false
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, article.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, article.FieldURL)
	}
	if m.description != nil {
		fields = append(fields, article.FieldDescription)
	}
	if m.content != nil {
		fields = append(fields, article.FieldContent)
	}
	if m.published_at != nil {
		fields = append(fields, article.FieldPublishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, article.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldTitle:
		return m.Title()
	case article.FieldURL:
		return m.URL()
	case article.FieldDescription:
		return m.Description()
	case article.FieldContent:
		return m.Content()
	case article.FieldPublishedAt:
		return m.PublishedAt()
	case article.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldTitle:
		return m.OldTitle(ctx)
	case article.FieldURL:
		return m.OldURL(ctx)
	case article.FieldDescription:
		return m.OldDescription(ctx)
	case article.FieldContent:
		return m.OldContent(ctx)
	case article.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case article.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case article.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case article.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case article.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case article.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case article.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(article.FieldDescription) {
		fields = append(fields, article.FieldDescription)
	}
	if m.FieldCleared(article.FieldContent) {
		fields = append(fields, article.FieldContent)
	}
	if m.FieldCleared(article.FieldPublishedAt) {
		fields = append(fields, article.FieldPublishedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	switch name {
	case article.FieldDescription:
		m.ClearDescription()
		return nil
	case article.FieldContent:
		m.ClearContent()
		return nil
	case article.FieldPublishedAt:
		m.ClearPublishedAt()
		return nil
	}
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldTitle:
		m.ResetTitle()
		return nil
	case article.FieldURL:
		m.ResetURL()
		return nil
	case article.FieldDescription:
		m.ResetDescription()
		return nil
	case article.FieldContent:
		m.ResetContent()
		return nil
	case article.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case article.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.feed != nil {
		edges = append(edges, article.EdgeFeed)
	}
	if m.summary != nil {
		edges = append(edges, article.EdgeSummary)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeFeed:
		if id := m.feed; id != nil {
			return []ent.Value{*id}
		}
	case article.EdgeSummary:
		if id := m.summary; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfeed {
		edges = append(edges, article.EdgeFeed)
	}
	if m.clearedsummary {
		edges = append(edges, article.EdgeSummary)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeFeed:
		return m.clearedfeed
	case article.EdgeSummary:
		return m.clearedsummary
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeFeed:
		m.ClearFeed()
		return nil
	case article.EdgeSummary:
		m.ClearSummary()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeFeed:
		m.ResetFeed()
		return nil
	case article.EdgeSummary:
		m.ResetSummary()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// FeedMutation represents an operation that mutates the Feed nodes in the graph.
type FeedMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	url              *string
	title            *string
	description      *string
	link             *string
	_order           *int
	add_order        *int
	is_bookmark      *bool
	last_checked_at  *time.Time
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	articles         map[uuid.UUID]struct{}
	removedarticles  map[uuid.UUID]struct{}
	clearedarticles  bool
	summaries        map[uuid.UUID]struct{}
	removedsummaries map[uuid.UUID]struct{}
	clearedsummaries bool
	done             bool
	oldValue         func(context.Context) (*Feed, error)
	predicates       []predicate.Feed
}

var _ ent.Mutation = (*FeedMutation)(nil)

// feedOption allows management of the mutation configuration using functional options.
type feedOption func(*FeedMutation)

// newFeedMutation creates new mutation for the Feed entity.
func newFeedMutation(c config, op Op, opts ...feedOption) *FeedMutation {
	m := &FeedMutation{
		config:        c,
		op:            op,
		typ:           TypeFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedID sets the ID field of the mutation.
func withFeedID(id uuid.UUID) feedOption {
	return func(m *FeedMutation) {
		var (
			err   error
			once  sync.Once
			value *Feed
		)
		m.oldValue = func(ctx context.Context) (*Feed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeed sets the old Feed of the mutation.
func withFeed(node *Feed) feedOption {
	return func(m *FeedMutation) {
		m.oldValue = func(context.Context) (*Feed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Feed entities.
func (m *FeedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *FeedMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *FeedMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *FeedMutation) ResetURL() {
	m.url = nil
}

// SetTitle sets the "title" field.
func (m *FeedMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *FeedMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *FeedMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[feed.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *FeedMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[feed.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, feed.FieldDescription)
}

// SetLink sets the "link" field.
func (m *FeedMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FeedMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *FeedMutation) ClearLink() {
	m.link = nil
	m.clearedFields[feed.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *FeedMutation) LinkCleared() bool {
	_, ok := m.clearedFields[feed.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *FeedMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, feed.FieldLink)
}

// SetOrder sets the "order" field.
func (m *FeedMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *FeedMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *FeedMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *FeedMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *FeedMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetIsBookmark sets the "is_bookmark" field.
func (m *FeedMutation) SetIsBookmark(b bool) {
	m.is_bookmark = &b
}

// IsBookmark returns the value of the "is_bookmark" field in the mutation.
func (m *FeedMutation) IsBookmark() (r bool, exists bool) {
	v := m.is_bookmark
	if v == nil {
		return
	}
	return *v, true
}

// OldIsBookmark returns the old "is_bookmark" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldIsBookmark(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsBookmark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsBookmark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsBookmark: %w", err)
	}
	return oldValue.IsBookmark, nil
}

// ResetIsBookmark resets all changes to the "is_bookmark" field.
func (m *FeedMutation) ResetIsBookmark() {
	m.is_bookmark = nil
}

// SetLastCheckedAt sets the "last_checked_at" field.
func (m *FeedMutation) SetLastCheckedAt(t time.Time) {
	m.last_checked_at = &t
}

// LastCheckedAt returns the value of the "last_checked_at" field in the mutation.
func (m *FeedMutation) LastCheckedAt() (r time.Time, exists bool) {
	v := m.last_checked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCheckedAt returns the old "last_checked_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldLastCheckedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCheckedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCheckedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCheckedAt: %w", err)
	}
	return oldValue.LastCheckedAt, nil
}

// ClearLastCheckedAt clears the value of the "last_checked_at" field.
func (m *FeedMutation) ClearLastCheckedAt() {
	m.last_checked_at = nil
	m.clearedFields[feed.FieldLastCheckedAt] = struct{}{}
}

// LastCheckedAtCleared returns if the "last_checked_at" field was cleared in this mutation.
func (m *FeedMutation) LastCheckedAtCleared() bool {
	_, ok := m.clearedFields[feed.FieldLastCheckedAt]
	return ok
}

// ResetLastCheckedAt resets all changes to the "last_checked_at" field.
func (m *FeedMutation) ResetLastCheckedAt() {
	m.last_checked_at = nil
	delete(m.clearedFields, feed.FieldLastCheckedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *FeedMutation) AddArticleIDs(ids ...uuid.UUID) {
	if m.articles == nil {
		m.articles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *FeedMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *FeedMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *FeedMutation) RemoveArticleIDs(ids ...uuid.UUID) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.articles, ids[i])
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *FeedMutation) RemovedArticlesIDs() (ids []uuid.UUID) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *FeedMutation) ArticlesIDs() (ids []uuid.UUID) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *FeedMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// AddSummaryIDs adds the "summaries" edge to the Summary entity by ids.
func (m *FeedMutation) AddSummaryIDs(ids ...uuid.UUID) {
	if m.summaries == nil {
		m.summaries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.summaries[ids[i]] = struct{}{}
	}
}

// ClearSummaries clears the "summaries" edge to the Summary entity.
func (m *FeedMutation) ClearSummaries() {
	m.clearedsummaries = true
}

// SummariesCleared reports if the "summaries" edge to the Summary entity was cleared.
func (m *FeedMutation) SummariesCleared() bool {
	return m.clearedsummaries
}

// RemoveSummaryIDs removes the "summaries" edge to the Summary entity by IDs.
func (m *FeedMutation) RemoveSummaryIDs(ids ...uuid.UUID) {
	if m.removedsummaries == nil {
		m.removedsummaries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.summaries, ids[i])
		m.removedsummaries[ids[i]] = struct{}{}
	}
}

// RemovedSummaries returns the removed IDs of the "summaries" edge to the Summary entity.
func (m *FeedMutation) RemovedSummariesIDs() (ids []uuid.UUID) {
	for id := range m.removedsummaries {
		ids = append(ids, id)
	}
	return
}

// SummariesIDs returns the "summaries" edge IDs in the mutation.
func (m *FeedMutation) SummariesIDs() (ids []uuid.UUID) {
	for id := range m.summaries {
		ids = append(ids, id)
	}
	return
}

// ResetSummaries resets all changes to the "summaries" edge.
func (m *FeedMutation) ResetSummaries() {
	m.summaries = nil
	m.clearedsummaries = false
	m.removedsummaries = nil
}

// Where appends a list predicates to the FeedMutation builder.
func (m *FeedMutation) Where(ps ...predicate.Feed) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Feed, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Feed).
func (m *FeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.url != nil {
		fields = append(fields, feed.FieldURL)
	}
	if m.title != nil {
		fields = append(fields, feed.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, feed.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, feed.FieldLink)
	}
	if m._order != nil {
		fields = append(fields, feed.FieldOrder)
	}
	if m.is_bookmark != nil {
		fields = append(fields, feed.FieldIsBookmark)
	}
	if m.last_checked_at != nil {
		fields = append(fields, feed.FieldLastCheckedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feed.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, feed.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldURL:
		return m.URL()
	case feed.FieldTitle:
		return m.Title()
	case feed.FieldDescription:
		return m.Description()
	case feed.FieldLink:
		return m.Link()
	case feed.FieldOrder:
		return m.Order()
	case feed.FieldIsBookmark:
		return m.IsBookmark()
	case feed.FieldLastCheckedAt:
		return m.LastCheckedAt()
	case feed.FieldCreatedAt:
		return m.CreatedAt()
	case feed.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feed.FieldURL:
		return m.OldURL(ctx)
	case feed.FieldTitle:
		return m.OldTitle(ctx)
	case feed.FieldDescription:
		return m.OldDescription(ctx)
	case feed.FieldLink:
		return m.OldLink(ctx)
	case feed.FieldOrder:
		return m.OldOrder(ctx)
	case feed.FieldIsBookmark:
		return m.OldIsBookmark(ctx)
	case feed.FieldLastCheckedAt:
		return m.OldLastCheckedAt(ctx)
	case feed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case feed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Feed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feed.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case feed.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case feed.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feed.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case feed.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case feed.FieldIsBookmark:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsBookmark(v)
		return nil
	case feed.FieldLastCheckedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCheckedAt(v)
		return nil
	case feed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case feed.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, feed.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feed.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Feed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(feed.FieldDescription) {
		fields = append(fields, feed.FieldDescription)
	}
	if m.FieldCleared(feed.FieldLink) {
		fields = append(fields, feed.FieldLink)
	}
	if m.FieldCleared(feed.FieldLastCheckedAt) {
		fields = append(fields, feed.FieldLastCheckedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedMutation) ClearField(name string) error {
	switch name {
	case feed.FieldDescription:
		m.ClearDescription()
		return nil
	case feed.FieldLink:
		m.ClearLink()
		return nil
	case feed.FieldLastCheckedAt:
		m.ClearLastCheckedAt()
		return nil
	}
	return fmt.Errorf("unknown Feed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedMutation) ResetField(name string) error {
	switch name {
	case feed.FieldURL:
		m.ResetURL()
		return nil
	case feed.FieldTitle:
		m.ResetTitle()
		return nil
	case feed.FieldDescription:
		m.ResetDescription()
		return nil
	case feed.FieldLink:
		m.ResetLink()
		return nil
	case feed.FieldOrder:
		m.ResetOrder()
		return nil
	case feed.FieldIsBookmark:
		m.ResetIsBookmark()
		return nil
	case feed.FieldLastCheckedAt:
		m.ResetLastCheckedAt()
		return nil
	case feed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case feed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.articles != nil {
		edges = append(edges, feed.EdgeArticles)
	}
	if m.summaries != nil {
		edges = append(edges, feed.EdgeSummaries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	case feed.EdgeSummaries:
		ids := make([]ent.Value, 0, len(m.summaries))
		for id := range m.summaries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedarticles != nil {
		edges = append(edges, feed.EdgeArticles)
	}
	if m.removedsummaries != nil {
		edges = append(edges, feed.EdgeSummaries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case feed.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	case feed.EdgeSummaries:
		ids := make([]ent.Value, 0, len(m.removedsummaries))
		for id := range m.removedsummaries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedarticles {
		edges = append(edges, feed.EdgeArticles)
	}
	if m.clearedsummaries {
		edges = append(edges, feed.EdgeSummaries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedMutation) EdgeCleared(name string) bool {
	switch name {
	case feed.EdgeArticles:
		return m.clearedarticles
	case feed.EdgeSummaries:
		return m.clearedsummaries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Feed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedMutation) ResetEdge(name string) error {
	switch name {
	case feed.EdgeArticles:
		m.ResetArticles()
		return nil
	case feed.EdgeSummaries:
		m.ResetSummaries()
		return nil
	}
	return fmt.Errorf("unknown Feed edge %s", name)
}

// SummaryMutation represents an operation that mutates the Summary nodes in the graph.
type SummaryMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	url            *string
	title          *string
	summary        *string
	readed         *bool
	listend        *bool
	audio_file     *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	article        *uuid.UUID
	clearedarticle bool
	feed           *uuid.UUID
	clearedfeed    bool
	done           bool
	oldValue       func(context.Context) (*Summary, error)
	predicates     []predicate.Summary
}

var _ ent.Mutation = (*SummaryMutation)(nil)

// summaryOption allows management of the mutation configuration using functional options.
type summaryOption func(*SummaryMutation)

// newSummaryMutation creates new mutation for the Summary entity.
func newSummaryMutation(c config, op Op, opts ...summaryOption) *SummaryMutation {
	m := &SummaryMutation{
		config:        c,
		op:            op,
		typ:           TypeSummary,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSummaryID sets the ID field of the mutation.
func withSummaryID(id uuid.UUID) summaryOption {
	return func(m *SummaryMutation) {
		var (
			err   error
			once  sync.Once
			value *Summary
		)
		m.oldValue = func(ctx context.Context) (*Summary, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Summary.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSummary sets the old Summary of the mutation.
func withSummary(node *Summary) summaryOption {
	return func(m *SummaryMutation) {
		m.oldValue = func(context.Context) (*Summary, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SummaryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SummaryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Summary entities.
func (m *SummaryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SummaryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SummaryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Summary.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *SummaryMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SummaryMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SummaryMutation) ResetURL() {
	m.url = nil
}

// SetTitle sets the "title" field.
func (m *SummaryMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SummaryMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *SummaryMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[summary.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *SummaryMutation) TitleCleared() bool {
	_, ok := m.clearedFields[summary.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *SummaryMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, summary.FieldTitle)
}

// SetSummary sets the "summary" field.
func (m *SummaryMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *SummaryMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *SummaryMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[summary.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *SummaryMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[summary.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *SummaryMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, summary.FieldSummary)
}

// SetReaded sets the "readed" field.
func (m *SummaryMutation) SetReaded(b bool) {
	m.readed = &b
}

// Readed returns the value of the "readed" field in the mutation.
func (m *SummaryMutation) Readed() (r bool, exists bool) {
	v := m.readed
	if v == nil {
		return
	}
	return *v, true
}

// OldReaded returns the old "readed" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldReaded(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReaded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReaded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReaded: %w", err)
	}
	return oldValue.Readed, nil
}

// ResetReaded resets all changes to the "readed" field.
func (m *SummaryMutation) ResetReaded() {
	m.readed = nil
}

// SetListend sets the "listend" field.
func (m *SummaryMutation) SetListend(b bool) {
	m.listend = &b
}

// Listend returns the value of the "listend" field in the mutation.
func (m *SummaryMutation) Listend() (r bool, exists bool) {
	v := m.listend
	if v == nil {
		return
	}
	return *v, true
}

// OldListend returns the old "listend" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldListend(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListend: %w", err)
	}
	return oldValue.Listend, nil
}

// ResetListend resets all changes to the "listend" field.
func (m *SummaryMutation) ResetListend() {
	m.listend = nil
}

// SetAudioFile sets the "audio_file" field.
func (m *SummaryMutation) SetAudioFile(s string) {
	m.audio_file = &s
}

// AudioFile returns the value of the "audio_file" field in the mutation.
func (m *SummaryMutation) AudioFile() (r string, exists bool) {
	v := m.audio_file
	if v == nil {
		return
	}
	return *v, true
}

// OldAudioFile returns the old "audio_file" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldAudioFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAudioFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAudioFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudioFile: %w", err)
	}
	return oldValue.AudioFile, nil
}

// ClearAudioFile clears the value of the "audio_file" field.
func (m *SummaryMutation) ClearAudioFile() {
	m.audio_file = nil
	m.clearedFields[summary.FieldAudioFile] = struct{}{}
}

// AudioFileCleared returns if the "audio_file" field was cleared in this mutation.
func (m *SummaryMutation) AudioFileCleared() bool {
	_, ok := m.clearedFields[summary.FieldAudioFile]
	return ok
}

// ResetAudioFile resets all changes to the "audio_file" field.
func (m *SummaryMutation) ResetAudioFile() {
	m.audio_file = nil
	delete(m.clearedFields, summary.FieldAudioFile)
}

// SetCreatedAt sets the "created_at" field.
func (m *SummaryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SummaryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Summary entity.
// If the Summary object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SummaryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SummaryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetArticleID sets the "article" edge to the Article entity by id.
func (m *SummaryMutation) SetArticleID(id uuid.UUID) {
	m.article = &id
}

// ClearArticle clears the "article" edge to the Article entity.
func (m *SummaryMutation) ClearArticle() {
	m.clearedarticle = true
}

// ArticleCleared reports if the "article" edge to the Article entity was cleared.
func (m *SummaryMutation) ArticleCleared() bool {
	return m.clearedarticle
}

// ArticleID returns the "article" edge ID in the mutation.
func (m *SummaryMutation) ArticleID() (id uuid.UUID, exists bool) {
	if m.article != nil {
		return *m.article, true
	}
	return
}

// ArticleIDs returns the "article" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArticleID instead. It exists only for internal usage by the builders.
func (m *SummaryMutation) ArticleIDs() (ids []uuid.UUID) {
	if id := m.article; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArticle resets all changes to the "article" edge.
func (m *SummaryMutation) ResetArticle() {
	m.article = nil
	m.clearedarticle = false
}

// SetFeedID sets the "feed" edge to the Feed entity by id.
func (m *SummaryMutation) SetFeedID(id uuid.UUID) {
	m.feed = &id
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (m *SummaryMutation) ClearFeed() {
	m.clearedfeed = true
}

// FeedCleared reports if the "feed" edge to the Feed entity was cleared.
func (m *SummaryMutation) FeedCleared() bool {
	return m.clearedfeed
}

// FeedID returns the "feed" edge ID in the mutation.
func (m *SummaryMutation) FeedID() (id uuid.UUID, exists bool) {
	if m.feed != nil {
		return *m.feed, true
	}
	return
}

// FeedIDs returns the "feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FeedID instead. It exists only for internal usage by the builders.
func (m *SummaryMutation) FeedIDs() (ids []uuid.UUID) {
	if id := m.feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFeed resets all changes to the "feed" edge.
func (m *SummaryMutation) ResetFeed() {
	m.feed = nil
	m.clearedfeed = false
}

// Where appends a list predicates to the SummaryMutation builder.
func (m *SummaryMutation) Where(ps ...predicate.Summary) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SummaryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SummaryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Summary, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SummaryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SummaryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Summary).
func (m *SummaryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SummaryMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.url != nil {
		fields = append(fields, summary.FieldURL)
	}
	if m.title != nil {
		fields = append(fields, summary.FieldTitle)
	}
	if m.summary != nil {
		fields = append(fields, summary.FieldSummary)
	}
	if m.readed != nil {
		fields = append(fields, summary.FieldReaded)
	}
	if m.listend != nil {
		fields = append(fields, summary.FieldListend)
	}
	if m.audio_file != nil {
		fields = append(fields, summary.FieldAudioFile)
	}
	if m.created_at != nil {
		fields = append(fields, summary.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SummaryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case summary.FieldURL:
		return m.URL()
	case summary.FieldTitle:
		return m.Title()
	case summary.FieldSummary:
		return m.Summary()
	case summary.FieldReaded:
		return m.Readed()
	case summary.FieldListend:
		return m.Listend()
	case summary.FieldAudioFile:
		return m.AudioFile()
	case summary.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SummaryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case summary.FieldURL:
		return m.OldURL(ctx)
	case summary.FieldTitle:
		return m.OldTitle(ctx)
	case summary.FieldSummary:
		return m.OldSummary(ctx)
	case summary.FieldReaded:
		return m.OldReaded(ctx)
	case summary.FieldListend:
		return m.OldListend(ctx)
	case summary.FieldAudioFile:
		return m.OldAudioFile(ctx)
	case summary.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Summary field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SummaryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case summary.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case summary.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case summary.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case summary.FieldReaded:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReaded(v)
		return nil
	case summary.FieldListend:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListend(v)
		return nil
	case summary.FieldAudioFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudioFile(v)
		return nil
	case summary.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Summary field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SummaryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SummaryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SummaryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Summary numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SummaryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(summary.FieldTitle) {
		fields = append(fields, summary.FieldTitle)
	}
	if m.FieldCleared(summary.FieldSummary) {
		fields = append(fields, summary.FieldSummary)
	}
	if m.FieldCleared(summary.FieldAudioFile) {
		fields = append(fields, summary.FieldAudioFile)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SummaryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SummaryMutation) ClearField(name string) error {
	switch name {
	case summary.FieldTitle:
		m.ClearTitle()
		return nil
	case summary.FieldSummary:
		m.ClearSummary()
		return nil
	case summary.FieldAudioFile:
		m.ClearAudioFile()
		return nil
	}
	return fmt.Errorf("unknown Summary nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SummaryMutation) ResetField(name string) error {
	switch name {
	case summary.FieldURL:
		m.ResetURL()
		return nil
	case summary.FieldTitle:
		m.ResetTitle()
		return nil
	case summary.FieldSummary:
		m.ResetSummary()
		return nil
	case summary.FieldReaded:
		m.ResetReaded()
		return nil
	case summary.FieldListend:
		m.ResetListend()
		return nil
	case summary.FieldAudioFile:
		m.ResetAudioFile()
		return nil
	case summary.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Summary field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SummaryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.article != nil {
		edges = append(edges, summary.EdgeArticle)
	}
	if m.feed != nil {
		edges = append(edges, summary.EdgeFeed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SummaryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case summary.EdgeArticle:
		if id := m.article; id != nil {
			return []ent.Value{*id}
		}
	case summary.EdgeFeed:
		if id := m.feed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SummaryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SummaryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SummaryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedarticle {
		edges = append(edges, summary.EdgeArticle)
	}
	if m.clearedfeed {
		edges = append(edges, summary.EdgeFeed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SummaryMutation) EdgeCleared(name string) bool {
	switch name {
	case summary.EdgeArticle:
		return m.clearedarticle
	case summary.EdgeFeed:
		return m.clearedfeed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SummaryMutation) ClearEdge(name string) error {
	switch name {
	case summary.EdgeArticle:
		m.ClearArticle()
		return nil
	case summary.EdgeFeed:
		m.ClearFeed()
		return nil
	}
	return fmt.Errorf("unknown Summary unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SummaryMutation) ResetEdge(name string) error {
	switch name {
	case summary.EdgeArticle:
		m.ResetArticle()
		return nil
	case summary.EdgeFeed:
		m.ResetFeed()
		return nil
	}
	return fmt.Errorf("unknown Summary edge %s", name)
}
