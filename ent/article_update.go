// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mopemope/quicknews/ent/article"
	"github.com/mopemope/quicknews/ent/feed"
	"github.com/mopemope/quicknews/ent/predicate"
	"github.com/mopemope/quicknews/ent/summary"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleMutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (au *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *ArticleUpdate) SetTitle(s string) *ArticleUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableTitle(s *string) *ArticleUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetURL sets the "url" field.
func (au *ArticleUpdate) SetURL(s string) *ArticleUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableURL(s *string) *ArticleUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *ArticleUpdate) SetDescription(s string) *ArticleUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDescription(s *string) *ArticleUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ArticleUpdate) ClearDescription() *ArticleUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetContent sets the "content" field.
func (au *ArticleUpdate) SetContent(s string) *ArticleUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableContent(s *string) *ArticleUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// ClearContent clears the value of the "content" field.
func (au *ArticleUpdate) ClearContent() *ArticleUpdate {
	au.mutation.ClearContent()
	return au
}

// SetPublishedAt sets the "published_at" field.
func (au *ArticleUpdate) SetPublishedAt(t time.Time) *ArticleUpdate {
	au.mutation.SetPublishedAt(t)
	return au
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillablePublishedAt(t *time.Time) *ArticleUpdate {
	if t != nil {
		au.SetPublishedAt(*t)
	}
	return au
}

// ClearPublishedAt clears the value of the "published_at" field.
func (au *ArticleUpdate) ClearPublishedAt() *ArticleUpdate {
	au.mutation.ClearPublishedAt()
	return au
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (au *ArticleUpdate) SetFeedID(id uuid.UUID) *ArticleUpdate {
	au.mutation.SetFeedID(id)
	return au
}

// SetFeed sets the "feed" edge to the Feed entity.
func (au *ArticleUpdate) SetFeed(f *Feed) *ArticleUpdate {
	return au.SetFeedID(f.ID)
}

// SetSummaryID sets the "summary" edge to the Summary entity by ID.
func (au *ArticleUpdate) SetSummaryID(id uuid.UUID) *ArticleUpdate {
	au.mutation.SetSummaryID(id)
	return au
}

// SetNillableSummaryID sets the "summary" edge to the Summary entity by ID if the given value is not nil.
func (au *ArticleUpdate) SetNillableSummaryID(id *uuid.UUID) *ArticleUpdate {
	if id != nil {
		au = au.SetSummaryID(*id)
	}
	return au
}

// SetSummary sets the "summary" edge to the Summary entity.
func (au *ArticleUpdate) SetSummary(s *Summary) *ArticleUpdate {
	return au.SetSummaryID(s.ID)
}

// Mutation returns the ArticleMutation object of the builder.
func (au *ArticleUpdate) Mutation() *ArticleMutation {
	return au.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (au *ArticleUpdate) ClearFeed() *ArticleUpdate {
	au.mutation.ClearFeed()
	return au
}

// ClearSummary clears the "summary" edge to the Summary entity.
func (au *ArticleUpdate) ClearSummary() *ArticleUpdate {
	au.mutation.ClearSummary()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArticleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArticleUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArticleUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.URL(); ok {
		if err := article.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Article.url": %w`, err)}
		}
	}
	if au.mutation.FeedCleared() && len(au.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Article.feed"`)
	}
	return nil
}

func (au *ArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(article.FieldURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(article.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(article.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if au.mutation.ContentCleared() {
		_spec.ClearField(article.FieldContent, field.TypeString)
	}
	if value, ok := au.mutation.PublishedAt(); ok {
		_spec.SetField(article.FieldPublishedAt, field.TypeTime, value)
	}
	if au.mutation.PublishedAtCleared() {
		_spec.ClearField(article.FieldPublishedAt, field.TypeTime)
	}
	if au.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   article.FeedTable,
			Columns: []string{article.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   article.FeedTable,
			Columns: []string{article.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   article.SummaryTable,
			Columns: []string{article.SummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   article.SummaryTable,
			Columns: []string{article.SummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleMutation
}

// SetTitle sets the "title" field.
func (auo *ArticleUpdateOne) SetTitle(s string) *ArticleUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableTitle(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetURL sets the "url" field.
func (auo *ArticleUpdateOne) SetURL(s string) *ArticleUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableURL(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *ArticleUpdateOne) SetDescription(s string) *ArticleUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDescription(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ArticleUpdateOne) ClearDescription() *ArticleUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetContent sets the "content" field.
func (auo *ArticleUpdateOne) SetContent(s string) *ArticleUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableContent(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// ClearContent clears the value of the "content" field.
func (auo *ArticleUpdateOne) ClearContent() *ArticleUpdateOne {
	auo.mutation.ClearContent()
	return auo
}

// SetPublishedAt sets the "published_at" field.
func (auo *ArticleUpdateOne) SetPublishedAt(t time.Time) *ArticleUpdateOne {
	auo.mutation.SetPublishedAt(t)
	return auo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillablePublishedAt(t *time.Time) *ArticleUpdateOne {
	if t != nil {
		auo.SetPublishedAt(*t)
	}
	return auo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (auo *ArticleUpdateOne) ClearPublishedAt() *ArticleUpdateOne {
	auo.mutation.ClearPublishedAt()
	return auo
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (auo *ArticleUpdateOne) SetFeedID(id uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetFeedID(id)
	return auo
}

// SetFeed sets the "feed" edge to the Feed entity.
func (auo *ArticleUpdateOne) SetFeed(f *Feed) *ArticleUpdateOne {
	return auo.SetFeedID(f.ID)
}

// SetSummaryID sets the "summary" edge to the Summary entity by ID.
func (auo *ArticleUpdateOne) SetSummaryID(id uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetSummaryID(id)
	return auo
}

// SetNillableSummaryID sets the "summary" edge to the Summary entity by ID if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableSummaryID(id *uuid.UUID) *ArticleUpdateOne {
	if id != nil {
		auo = auo.SetSummaryID(*id)
	}
	return auo
}

// SetSummary sets the "summary" edge to the Summary entity.
func (auo *ArticleUpdateOne) SetSummary(s *Summary) *ArticleUpdateOne {
	return auo.SetSummaryID(s.ID)
}

// Mutation returns the ArticleMutation object of the builder.
func (auo *ArticleUpdateOne) Mutation() *ArticleMutation {
	return auo.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (auo *ArticleUpdateOne) ClearFeed() *ArticleUpdateOne {
	auo.mutation.ClearFeed()
	return auo
}

// ClearSummary clears the "summary" edge to the Summary entity.
func (auo *ArticleUpdateOne) ClearSummary() *ArticleUpdateOne {
	auo.mutation.ClearSummary()
	return auo
}

// Where appends a list predicates to the ArticleUpdate builder.
func (auo *ArticleUpdateOne) Where(ps ...predicate.Article) *ArticleUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Article entity.
func (auo *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArticleUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.URL(); ok {
		if err := article.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Article.url": %w`, err)}
		}
	}
	if auo.mutation.FeedCleared() && len(auo.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Article.feed"`)
	}
	return nil
}

func (auo *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(article.FieldURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(article.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(article.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if auo.mutation.ContentCleared() {
		_spec.ClearField(article.FieldContent, field.TypeString)
	}
	if value, ok := auo.mutation.PublishedAt(); ok {
		_spec.SetField(article.FieldPublishedAt, field.TypeTime, value)
	}
	if auo.mutation.PublishedAtCleared() {
		_spec.ClearField(article.FieldPublishedAt, field.TypeTime)
	}
	if auo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   article.FeedTable,
			Columns: []string{article.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   article.FeedTable,
			Columns: []string{article.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SummaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   article.SummaryTable,
			Columns: []string{article.SummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SummaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   article.SummaryTable,
			Columns: []string{article.SummaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Article{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
