// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mopemope/quicknews/ent/article"
	"github.com/mopemope/quicknews/ent/feed"
	"github.com/mopemope/quicknews/ent/predicate"
	"github.com/mopemope/quicknews/ent/summary"
)

// SummaryUpdate is the builder for updating Summary entities.
type SummaryUpdate struct {
	config
	hooks    []Hook
	mutation *SummaryMutation
}

// Where appends a list predicates to the SummaryUpdate builder.
func (su *SummaryUpdate) Where(ps ...predicate.Summary) *SummaryUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetURL sets the "url" field.
func (su *SummaryUpdate) SetURL(s string) *SummaryUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SummaryUpdate) SetNillableURL(s *string) *SummaryUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *SummaryUpdate) SetTitle(s string) *SummaryUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SummaryUpdate) SetNillableTitle(s *string) *SummaryUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// ClearTitle clears the value of the "title" field.
func (su *SummaryUpdate) ClearTitle() *SummaryUpdate {
	su.mutation.ClearTitle()
	return su
}

// SetSummary sets the "summary" field.
func (su *SummaryUpdate) SetSummary(s string) *SummaryUpdate {
	su.mutation.SetSummary(s)
	return su
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (su *SummaryUpdate) SetNillableSummary(s *string) *SummaryUpdate {
	if s != nil {
		su.SetSummary(*s)
	}
	return su
}

// ClearSummary clears the value of the "summary" field.
func (su *SummaryUpdate) ClearSummary() *SummaryUpdate {
	su.mutation.ClearSummary()
	return su
}

// SetAudioData sets the "audio_data" field.
func (su *SummaryUpdate) SetAudioData(b []byte) *SummaryUpdate {
	su.mutation.SetAudioData(b)
	return su
}

// ClearAudioData clears the value of the "audio_data" field.
func (su *SummaryUpdate) ClearAudioData() *SummaryUpdate {
	su.mutation.ClearAudioData()
	return su
}

// SetReaded sets the "readed" field.
func (su *SummaryUpdate) SetReaded(b bool) *SummaryUpdate {
	su.mutation.SetReaded(b)
	return su
}

// SetNillableReaded sets the "readed" field if the given value is not nil.
func (su *SummaryUpdate) SetNillableReaded(b *bool) *SummaryUpdate {
	if b != nil {
		su.SetReaded(*b)
	}
	return su
}

// SetListend sets the "listend" field.
func (su *SummaryUpdate) SetListend(b bool) *SummaryUpdate {
	su.mutation.SetListend(b)
	return su
}

// SetNillableListend sets the "listend" field if the given value is not nil.
func (su *SummaryUpdate) SetNillableListend(b *bool) *SummaryUpdate {
	if b != nil {
		su.SetListend(*b)
	}
	return su
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (su *SummaryUpdate) SetArticleID(id uuid.UUID) *SummaryUpdate {
	su.mutation.SetArticleID(id)
	return su
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (su *SummaryUpdate) SetNillableArticleID(id *uuid.UUID) *SummaryUpdate {
	if id != nil {
		su = su.SetArticleID(*id)
	}
	return su
}

// SetArticle sets the "article" edge to the Article entity.
func (su *SummaryUpdate) SetArticle(a *Article) *SummaryUpdate {
	return su.SetArticleID(a.ID)
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (su *SummaryUpdate) SetFeedID(id uuid.UUID) *SummaryUpdate {
	su.mutation.SetFeedID(id)
	return su
}

// SetFeed sets the "feed" edge to the Feed entity.
func (su *SummaryUpdate) SetFeed(f *Feed) *SummaryUpdate {
	return su.SetFeedID(f.ID)
}

// Mutation returns the SummaryMutation object of the builder.
func (su *SummaryUpdate) Mutation() *SummaryMutation {
	return su.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (su *SummaryUpdate) ClearArticle() *SummaryUpdate {
	su.mutation.ClearArticle()
	return su
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (su *SummaryUpdate) ClearFeed() *SummaryUpdate {
	su.mutation.ClearFeed()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SummaryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SummaryUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SummaryUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SummaryUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SummaryUpdate) check() error {
	if v, ok := su.mutation.URL(); ok {
		if err := summary.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Summary.url": %w`, err)}
		}
	}
	if su.mutation.FeedCleared() && len(su.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Summary.feed"`)
	}
	return nil
}

func (su *SummaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(summary.Table, summary.Columns, sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(summary.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(summary.FieldTitle, field.TypeString, value)
	}
	if su.mutation.TitleCleared() {
		_spec.ClearField(summary.FieldTitle, field.TypeString)
	}
	if value, ok := su.mutation.Summary(); ok {
		_spec.SetField(summary.FieldSummary, field.TypeString, value)
	}
	if su.mutation.SummaryCleared() {
		_spec.ClearField(summary.FieldSummary, field.TypeString)
	}
	if value, ok := su.mutation.AudioData(); ok {
		_spec.SetField(summary.FieldAudioData, field.TypeBytes, value)
	}
	if su.mutation.AudioDataCleared() {
		_spec.ClearField(summary.FieldAudioData, field.TypeBytes)
	}
	if value, ok := su.mutation.Readed(); ok {
		_spec.SetField(summary.FieldReaded, field.TypeBool, value)
	}
	if value, ok := su.mutation.Listend(); ok {
		_spec.SetField(summary.FieldListend, field.TypeBool, value)
	}
	if su.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   summary.ArticleTable,
			Columns: []string{summary.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   summary.ArticleTable,
			Columns: []string{summary.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   summary.FeedTable,
			Columns: []string{summary.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   summary.FeedTable,
			Columns: []string{summary.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{summary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SummaryUpdateOne is the builder for updating a single Summary entity.
type SummaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SummaryMutation
}

// SetURL sets the "url" field.
func (suo *SummaryUpdateOne) SetURL(s string) *SummaryUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableURL(s *string) *SummaryUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *SummaryUpdateOne) SetTitle(s string) *SummaryUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableTitle(s *string) *SummaryUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// ClearTitle clears the value of the "title" field.
func (suo *SummaryUpdateOne) ClearTitle() *SummaryUpdateOne {
	suo.mutation.ClearTitle()
	return suo
}

// SetSummary sets the "summary" field.
func (suo *SummaryUpdateOne) SetSummary(s string) *SummaryUpdateOne {
	suo.mutation.SetSummary(s)
	return suo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableSummary(s *string) *SummaryUpdateOne {
	if s != nil {
		suo.SetSummary(*s)
	}
	return suo
}

// ClearSummary clears the value of the "summary" field.
func (suo *SummaryUpdateOne) ClearSummary() *SummaryUpdateOne {
	suo.mutation.ClearSummary()
	return suo
}

// SetAudioData sets the "audio_data" field.
func (suo *SummaryUpdateOne) SetAudioData(b []byte) *SummaryUpdateOne {
	suo.mutation.SetAudioData(b)
	return suo
}

// ClearAudioData clears the value of the "audio_data" field.
func (suo *SummaryUpdateOne) ClearAudioData() *SummaryUpdateOne {
	suo.mutation.ClearAudioData()
	return suo
}

// SetReaded sets the "readed" field.
func (suo *SummaryUpdateOne) SetReaded(b bool) *SummaryUpdateOne {
	suo.mutation.SetReaded(b)
	return suo
}

// SetNillableReaded sets the "readed" field if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableReaded(b *bool) *SummaryUpdateOne {
	if b != nil {
		suo.SetReaded(*b)
	}
	return suo
}

// SetListend sets the "listend" field.
func (suo *SummaryUpdateOne) SetListend(b bool) *SummaryUpdateOne {
	suo.mutation.SetListend(b)
	return suo
}

// SetNillableListend sets the "listend" field if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableListend(b *bool) *SummaryUpdateOne {
	if b != nil {
		suo.SetListend(*b)
	}
	return suo
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (suo *SummaryUpdateOne) SetArticleID(id uuid.UUID) *SummaryUpdateOne {
	suo.mutation.SetArticleID(id)
	return suo
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (suo *SummaryUpdateOne) SetNillableArticleID(id *uuid.UUID) *SummaryUpdateOne {
	if id != nil {
		suo = suo.SetArticleID(*id)
	}
	return suo
}

// SetArticle sets the "article" edge to the Article entity.
func (suo *SummaryUpdateOne) SetArticle(a *Article) *SummaryUpdateOne {
	return suo.SetArticleID(a.ID)
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (suo *SummaryUpdateOne) SetFeedID(id uuid.UUID) *SummaryUpdateOne {
	suo.mutation.SetFeedID(id)
	return suo
}

// SetFeed sets the "feed" edge to the Feed entity.
func (suo *SummaryUpdateOne) SetFeed(f *Feed) *SummaryUpdateOne {
	return suo.SetFeedID(f.ID)
}

// Mutation returns the SummaryMutation object of the builder.
func (suo *SummaryUpdateOne) Mutation() *SummaryMutation {
	return suo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (suo *SummaryUpdateOne) ClearArticle() *SummaryUpdateOne {
	suo.mutation.ClearArticle()
	return suo
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (suo *SummaryUpdateOne) ClearFeed() *SummaryUpdateOne {
	suo.mutation.ClearFeed()
	return suo
}

// Where appends a list predicates to the SummaryUpdate builder.
func (suo *SummaryUpdateOne) Where(ps ...predicate.Summary) *SummaryUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SummaryUpdateOne) Select(field string, fields ...string) *SummaryUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Summary entity.
func (suo *SummaryUpdateOne) Save(ctx context.Context) (*Summary, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SummaryUpdateOne) SaveX(ctx context.Context) *Summary {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SummaryUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SummaryUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SummaryUpdateOne) check() error {
	if v, ok := suo.mutation.URL(); ok {
		if err := summary.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Summary.url": %w`, err)}
		}
	}
	if suo.mutation.FeedCleared() && len(suo.mutation.FeedIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Summary.feed"`)
	}
	return nil
}

func (suo *SummaryUpdateOne) sqlSave(ctx context.Context) (_node *Summary, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(summary.Table, summary.Columns, sqlgraph.NewFieldSpec(summary.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Summary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, summary.FieldID)
		for _, f := range fields {
			if !summary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != summary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(summary.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(summary.FieldTitle, field.TypeString, value)
	}
	if suo.mutation.TitleCleared() {
		_spec.ClearField(summary.FieldTitle, field.TypeString)
	}
	if value, ok := suo.mutation.Summary(); ok {
		_spec.SetField(summary.FieldSummary, field.TypeString, value)
	}
	if suo.mutation.SummaryCleared() {
		_spec.ClearField(summary.FieldSummary, field.TypeString)
	}
	if value, ok := suo.mutation.AudioData(); ok {
		_spec.SetField(summary.FieldAudioData, field.TypeBytes, value)
	}
	if suo.mutation.AudioDataCleared() {
		_spec.ClearField(summary.FieldAudioData, field.TypeBytes)
	}
	if value, ok := suo.mutation.Readed(); ok {
		_spec.SetField(summary.FieldReaded, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Listend(); ok {
		_spec.SetField(summary.FieldListend, field.TypeBool, value)
	}
	if suo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   summary.ArticleTable,
			Columns: []string{summary.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   summary.ArticleTable,
			Columns: []string{summary.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   summary.FeedTable,
			Columns: []string{summary.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   summary.FeedTable,
			Columns: []string{summary.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Summary{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{summary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
